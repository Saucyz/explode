LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;

ENTITY serial IS
PORT (
KEY : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
CLOCK_50 : IN STD_LOGIC;

DRAM_CLK, DRAM_CKE : OUT STD_LOGIC;
DRAM_ADDR : OUT STD_LOGIC_VECTOR(11 DOWNTO 0);
DRAM_BA_0, DRAM_BA_1 : BUFFER STD_LOGIC;
DRAM_CS_N, DRAM_CAS_N, DRAM_RAS_N, DRAM_WE_N : OUT STD_LOGIC;
DRAM_DQ : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
DRAM_UDQM, DRAM_LDQM : BUFFER STD_LOGIC ;

LCD_DATA : inout STD_LOGIC_VECTOR(7 downto 0);
LCD_ON, LCD_BLON, LCD_EN, LCD_RS, LCD_RW : out STD_LOGIC); 

END serial;

component nios_system is
port (
	clk_clk              : in    std_logic                     := 'X';             -- clk
	reset_reset_n        : in    std_logic                     := 'X';             -- reset_n
	leds_export          : out   std_logic_vector(7 downto 0);                     -- export
	switches_export      : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- export
	sdram_wire_addr      : out   std_logic_vector(11 downto 0);                    -- addr
	sdram_wire_ba        : out   std_logic_vector(1 downto 0);                     -- ba
	sdram_wire_cas_n     : out   std_logic;                                        -- cas_n
	sdram_wire_cke       : out   std_logic;                                        -- cke
	sdram_wire_cs_n      : out   std_logic;                                        -- cs_n
	sdram_wire_dq        : inout std_logic_vector(15 downto 0) := (others => 'X'); -- dq
	sdram_wire_dqm       : out   std_logic_vector(1 downto 0);                     -- dqm
	sdram_wire_ras_n     : out   std_logic;                                        -- ras_n
	sdram_wire_we_n      : out   std_logic;                                        -- we_n
	lcd_data_DATA        : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- DATA
	lcd_data_ON          : out   std_logic;                                        -- ON
	lcd_data_BLON        : out   std_logic;                                        -- BLON
	lcd_data_EN          : out   std_logic;                                        -- EN
	lcd_data_RS          : out   std_logic;                                        -- RS
	lcd_data_RW          : out   std_logic;                                        -- RW
	keys_export          : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- export
	sdram_clk_clk        : out   std_logic;                                        -- clk
	audio_config_SDAT    : inout std_logic                     := 'X';             -- SDAT
	audio_config_SCLK    : out   std_logic;                                        -- SCLK
	audio_ADCDAT         : in    std_logic                     := 'X';             -- ADCDAT
	audio_ADCLRCK        : in    std_logic                     := 'X';             -- ADCLRCK
	audio_BCLK           : in    std_logic                     := 'X';             -- BCLK
	audio_DACDAT         : out   std_logic;                                        -- DACDAT
	audio_DACLRCK        : in    std_logic                     := 'X';             -- DACLRCK
	audio_clk_clk        : out   std_logic;                                        -- clk
	clk_in_secondary_clk : in    std_logic                     := 'X';             -- clk
	serial_RXD           : in    std_logic                     := 'X';             -- RXD
	serial_TXD           : out   std_logic                                         -- TXD
);
end component nios_system;

u0 : component nios_system
port map (
	clk_clk              => CONNECTED_TO_clk_clk,              --              clk.clk
	reset_reset_n        => CONNECTED_TO_reset_reset_n,        --            reset.reset_n
	leds_export          => CONNECTED_TO_leds_export,          --             leds.export
	switches_export      => CONNECTED_TO_switches_export,      --         switches.export
	sdram_wire_addr      => CONNECTED_TO_sdram_wire_addr,      --       sdram_wire.addr
	sdram_wire_ba        => CONNECTED_TO_sdram_wire_ba,        --                 .ba
	sdram_wire_cas_n     => CONNECTED_TO_sdram_wire_cas_n,     --                 .cas_n
	sdram_wire_cke       => CONNECTED_TO_sdram_wire_cke,       --                 .cke
	sdram_wire_cs_n      => CONNECTED_TO_sdram_wire_cs_n,      --                 .cs_n
	sdram_wire_dq        => CONNECTED_TO_sdram_wire_dq,        --                 .dq
	sdram_wire_dqm       => CONNECTED_TO_sdram_wire_dqm,       --                 .dqm
	sdram_wire_ras_n     => CONNECTED_TO_sdram_wire_ras_n,     --                 .ras_n
	sdram_wire_we_n      => CONNECTED_TO_sdram_wire_we_n,      --                 .we_n
	lcd_data_DATA        => CONNECTED_TO_lcd_data_DATA,        --         lcd_data.DATA
	lcd_data_ON          => CONNECTED_TO_lcd_data_ON,          --                 .ON
	lcd_data_BLON        => CONNECTED_TO_lcd_data_BLON,        --                 .BLON
	lcd_data_EN          => CONNECTED_TO_lcd_data_EN,          --                 .EN
	lcd_data_RS          => CONNECTED_TO_lcd_data_RS,          --                 .RS
	lcd_data_RW          => CONNECTED_TO_lcd_data_RW,          --                 .RW
	keys_export          => CONNECTED_TO_keys_export,          --             keys.export
	sdram_clk_clk        => CONNECTED_TO_sdram_clk_clk,        --        sdram_clk.clk
	audio_config_SDAT    => CONNECTED_TO_audio_config_SDAT,    --     audio_config.SDAT
	audio_config_SCLK    => CONNECTED_TO_audio_config_SCLK,    --                 .SCLK
	audio_ADCDAT         => CONNECTED_TO_audio_ADCDAT,         --            audio.ADCDAT
	audio_ADCLRCK        => CONNECTED_TO_audio_ADCLRCK,        --                 .ADCLRCK
	audio_BCLK           => CONNECTED_TO_audio_BCLK,           --                 .BCLK
	audio_DACDAT         => CONNECTED_TO_audio_DACDAT,         --                 .DACDAT
	audio_DACLRCK        => CONNECTED_TO_audio_DACLRCK,        --                 .DACLRCK
	audio_clk_clk        => CONNECTED_TO_audio_clk_clk,        --        audio_clk.clk
	clk_in_secondary_clk => CONNECTED_TO_clk_in_secondary_clk, -- clk_in_secondary.clk
	serial_RXD           => CONNECTED_TO_serial_RXD,           --           serial.RXD
	serial_TXD           => CONNECTED_TO_serial_TXD            --                 .TXD
);

